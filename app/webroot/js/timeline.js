// Generated by CoffeeScript 1.6.2
(function() {
  $(document).ready(function() {
    var game;
    return game = new Game();
  });

  window.Game = (function() {
    function Game() {
      this.init();
    }

    Game.prototype.init = function() {
      this.FPS = 60;
      this.SPEED = 0.05;
      this.mouseDown;
      this.canvas = document.getElementById('screen');
      this.ctx = this.canvas.getContext("2d");
      this.img = new Image();
      this.img.src = window.webroot +"img/city.png";

      this.direction;
      this.state = 'move';
      this.offset = 0;
      
      
      setInterval((function() {
        return this.draw(this.ctx);
      }).bind(this), 1000 / this.FPS);
      
      
      setInterval((function() {
        return this.update();
      }).bind(this), 10);
      this.canvas.addEventListener('mousemove', this.onMouseMove.bind(this));
      this.canvas.addEventListener('mousedown', this.onMouseDown.bind(this));
      this.canvas.addEventListener('mouseup', this.onMouseUp.bind(this));
      this.canvas.width=700;
      this.canvas.height=200;
      return this.canvas.addEventListener("mouseout", this.onMouseOut.bind(this));
    };

    Game.prototype.update = function() {
   	  
      if (this.state === 'move') {
        if (this.offset < 0) {
          this.offset = 0;
        }
        if (this.offset > (this.img.naturalWidth - this.canvas.width)) {
          this.offset = this.img.naturalWidth - this.canvas.width;
        }
        if (this.offset === 0) {
          this.direction = 'right';
        }
        if (this.offset === (this.img.naturalWidth - this.canvas.width)) {
          this.direction = 'left';
        }
        if (this.direction === 'right') {
          this.offset += 1 * this.SPEED / 1;
        } else {
          this.offset -= 1 * this.SPEED / 1;
        }
      }
    };

    Game.prototype.draw = function(ctx) {
	  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return this.ctx.drawImage(this.img, this.offset, 0, this.canvas.width, 200, 0, 0, this.canvas.width, this.canvas.height);
     // return ctx.drawImage(this.img, 0 ,0);
    };

    Game.prototype.onMouseMove = function(e) {
      var distX, distY, distance, message, mousePos;

      mousePos = this.getPos(this.canvas, e);
      message = 'Mouse position: ' + mousePos.x + ',' + mousePos.y;
      if (this.mouseDown) {
        distX = this.mouseDown.x - mousePos.x;
        distY = this.mouseDown.y - mousePos.y;
        distance = Math.sqrt(Math.pow(distX, 2) + Math.pow(distY, 2));
        if (distX < 0) {
          distance = -distance;
        }
        distance = distance * 0.05;
        this.offset += distance;
        if (this.offset < 0) {
          this.offset = 0;
        }
        if (this.offset > (this.img.naturalWidth - this.canvas.width)) {
          this.offset = this.img.naturalWidth - this.canvas.width;
        }
        return 
      }
    };

    Game.prototype.onMouseDown = function(e) {
      this.mouseDown = this.getPos(this.canvas, e);
      return this.state = 'stopped';
    };

    Game.prototype.onMouseUp = function() {
      this.mouseDown = null;
      return this.state = 'move';
    };

    Game.prototype.onMouseOut = function() {
      this.mouseDown = null;
      return this.state = 'move';
    };

    Game.prototype.getPos = function(canvas, evt) {
      var rect;

      rect = canvas.getBoundingClientRect();
      return {
        x: evt.clientX - rect.left,
        y: evt.clientY - rect.top
      };
    };

    return Game;

  })();

}).call(this);
